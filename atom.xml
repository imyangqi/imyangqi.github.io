<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>光の自传</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-18T11:14:59.594Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>杨琦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>电磁场数值计算中常用到的一些常数</title>
    <link href="http://example.com/2021/02/18/constants_in_EM/"/>
    <id>http://example.com/2021/02/18/constants_in_EM/</id>
    <published>2021-02-17T16:00:00.000Z</published>
    <updated>2021-02-18T11:14:59.594Z</updated>
    
    <content type="html"><![CDATA[<p>在电磁场数值编程中常会用到的一些常数，主要包含：圆周率(Pi)、真空中的介电常数(Vacuum permittivity)、真空中的磁导率(Vacuum permeability)、光速(Speed of light)和自由空间中的波阻抗(Impedance of free space)，具体数值为</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PI &#x3D; 3.141592653589793;</span><br><span class="line">EPS_0 &#x3D; 8.8541878128e-12;</span><br><span class="line">MU_0 &#x3D; 1.25663706212e-6;</span><br><span class="line">C_0 &#x3D; 299792458;</span><br><span class="line">Z_0 &#x3D; 376.730313668;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在电磁场数值编程中常会用到的一些常数，主要包含：圆周率(Pi)、真空中的介电常数(Vacuum permittivity)、真空中的磁导率(Vacuum permeability)、光速(Speed of light)和自由空间中的波阻抗(Impedance of free space)，具体数值为&lt;/p&gt;</summary>
    
    
    
    <category term="数值计算" scheme="http://example.com/categories/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="电磁场" scheme="http://example.com/tags/%E7%94%B5%E7%A3%81%E5%9C%BA/"/>
    
    <category term="常数" scheme="http://example.com/tags/%E5%B8%B8%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>我和苏打绿的故事</title>
    <link href="http://example.com/2021/02/13/sodagreen_with_me/"/>
    <id>http://example.com/2021/02/13/sodagreen_with_me/</id>
    <published>2021-02-12T16:00:00.000Z</published>
    <updated>2021-03-01T14:13:50.395Z</updated>
    
    <content type="html"><![CDATA[<p>苏打绿对我的影响可以说已经到了人生导师级别，不论是在充满了敏感与胆怯的高中时代，还是在后来上大学之后无数个感到孤独的夜晚，总有苏打绿的音乐陪伴着我，鼓励我和治愈我。在每一次的挫折和受伤之后，总能在苏打绿的音乐里找到勇气，让我能继续满怀善意地重新出发。<a id="more"></a></p><h1 id="初识苏打绿"><a href="#初识苏打绿" class="headerlink" title="初识苏打绿"></a>初识苏打绿</h1><p>大概是在2006年我还在上小学五年级的时候，某天在一个名叫Channel [V]的音乐频道上看到《小情歌》的MV，当时觉得主唱吴青峰的声音好细腻、好温柔，刚开始我还以为吴青峰是女生，只是打扮得偏中性而已。</p><center class="half"><img src="/figures/sodagreen_with_me/cassette_tape.png" alt="卡盒磁带"  width="200"/><br><img src="/figures/sodagreen_with_me/tape_player.jpg" alt="磁带播放器"  width="200"/></center>在小学的那个时候我们听音乐的主要途径是卡盒磁带+便携式磁带播放机，如果在看电视的时候听到好听的音乐就会用磁带播放机录制下来，或者是去买集市上买音乐磁带。在我印象中，当时在电视上经常会看到手机彩铃的广告，会播放一些当下流行歌曲的片段，比如《求佛》、《秋天不回来》、《发如雪》等，因为那个时候没有钱去买卡盒磁带，如果在电视上听到某个自己很喜欢的歌曲，哪怕是只有片段也会用磁带机赶紧录下来。这个时候我除了《小情歌》以外，我几乎没有听过苏打绿的其它歌曲。<h1 id="真正喜欢"><a href="#真正喜欢" class="headerlink" title="真正喜欢"></a>真正喜欢</h1><p>真正开始喜欢苏打绿是在高中时期，那个时候我已经有了能够播放mp3的手机，获取音乐的途径也方便了许多。当时国内的版权意识还很薄弱，在网上基本上能免费下载到任何自己想听的音乐。除了当时已经很流行的《小情歌》，我最喜欢的是苏打绿的《无与伦比的美丽》，觉得里面的歌词描绘的爱情观太美好了。</p><blockquote><p>你形容我是这个世界上无与伦比的美丽<br>我知道你才是这世界上无与伦比的美丽<br>你知道当你需要个夏天我会拼了命努力<br>我知道你会做我的掩护当我是个逃兵<br>——苏打绿《无与伦比的美丽》</p></blockquote><p>我怀着这样的爱情观，在高一下学期开始了自己的初恋，写很长的情书、精心准备礼物、给她带早餐、一起完成作业、下晚自习后送她回家，每天都沉浸在幸福和感动中。到高二的时候她转学去了市里更好的高中，刚开始的时候我们还坚持每天通很长时间的电话，但在一段时间之后，我们还是分手了。我很难过，每天晚上都会哭，日记里写满了和她相关的内容，这段时间听得最多的是苏打绿的《相信》、《左边》和《雨中的操场》，边听边哭，那个时候还真是个爱哭鬼呢。</p><blockquote><p>时间往前冲 /冲散了你和我 /冲散心跳脉搏 /回忆寄放窗口<br>粉刷好旧屋檐的巷口 /掩埋了泪眼的斑驳 /在转角之后 /扣上故事门锁<br>请你张开双手 /让我死在怀中<br>——苏打绿《左边》</p></blockquote><p>在难过了很久以后，我还是很难释怀，但我清楚自己应该努力学习，不能对不起在外打工的父母。这段时间很感激我的哥们、同桌、还有成辉，一直陪伴着我、安慰我，我开始慢慢从感情中走出来，学习状态也越来越好。虽然当时很难割舍，但还是很感谢初恋，在我自卑与胆怯交织的青春时光，给了我一段那么美好的爱情。在我努力学习的这段时间，陪伴着我的是苏打绿的《十年一刻》、《近未来》和《他夏了夏天》。</p><blockquote><p>可能忙了又忙 /可能伤了又伤 /可能无数眼泪 /在夜晚尝了又尝<br>可是换来成长 /可是换来希望 / 如今我站在台上 /这么对你讲<br>十年的功聚成灿烂那一分钟的梦 /生命舞台发光的人绝不是只会说<br>——苏打绿《十年一刻》</p></blockquote><center class="half"><img src="/figures/sodagreen_with_me/four_people.jpg" alt="同桌、成辉、哥们和我"  width="400"/></center><p>我很幸运，高考成绩比我想象中的要好很多，是应届年级第一。我永远都忘不了那天在出租屋里看到自己成绩的那一刻，满眼喜悦的泪水，激动到朝窗外大喊。从村里的小学以第一名的成绩考到县里最好的初中部，在初中受挫之后只考到县里很普通的二中，再从二中的普通班考到年级第一，这一路是那么地曲折而又充满戏剧性。</p><center class="half"><img src="/figures/sodagreen_with_me/wyq_with_me.jpg" alt="我和高中舍友吴育清"  width="400"/></center><p>或许是因为苏打绿的原因，我对这个世界满怀善意，一直记得高一的时候历史老师跟我们说过的一句话：也许我们通过别人得到某件东西会感到快乐，但当我们去为别人而付出某件东西的之后，收获的快乐往往会比前者更加地丰富和有意义。怀着这样信念，我在高中的时候总是尽所能地去帮助他人，在二中度过的高中时光尽管辛苦，但是过得很开心。我信仰苏打绿的音乐，我相信温柔和善良的力量，或许很多时候这个世界并没有我们想象得那么美好，尽管如此，我还是会努力坚持温柔和善良的信念，去努力地帮助别人，绝不轻易让外界改变自己。</p><h1 id="心灵的寄托"><a href="#心灵的寄托" class="headerlink" title="心灵的寄托"></a>心灵的寄托</h1><p>在上大学后，开始有了自己的智能手机和电脑，听音乐的途径变得更加丰富和容易。大学是时光对我来说是一段艰苦的磨练，一方面由于自己是农村出身，家庭很贫困，有种无法抹去的很拧巴的自卑感，另一方面，在入学分班考试结束后，我深深地体会到了自己的弱小和贵州教育水平的落后，数学和物理两张试卷，我会写的题目只手能数，我站在人潮中，满是不安和挫败。这个时候，我让自己在浸泡在苏打绿的音乐里，《你在烦恼什么》是我最常听的：</p><blockquote><p>没有不会谢的花 没有不会退的浪<br>没有不会暗的光 你在烦恼什么吗<br>没有不会淡的疤 没有不会好的伤<br>没有不会停下来的绝望 你在忧郁什么啊<br>时间从来不回答 生命从来不喧哗<br>就算只有片刻我也不害怕<br>是片刻组成永恒哪<br>——苏打绿《你在烦恼什么》</p></blockquote><p>默默告诉自己：要学会享受生命的每个时刻，坚定且努力地完成当下的任务，不夸大情绪，不逃避困难，面对困难去努力想办法解决，去帮助他人和接受他人的帮助。</p><center class="half"><img src="/figures/sodagreen_with_me/gjy_and_me.jpg" alt="我和大学舍友在金工实习"  width="300"/></center><p>怀着这样的信念，我接受了自己和别人的差距，并在自己的能力范围内去做最大的努力，虽然能保证自己不挂科，但是在班上的成绩还是很普通。在后来大三的时候，某天班里有同学很偶然地邀请我参加数模美赛，我抱着试一试的心态参加了，负责编程和建模，我们一起培训和练习，最后在正式比赛的三天内，我们只休息了第一天的晚上，第二天和第三天通宵工作，在等了几个月之后结果出来，我们队获得了M奖。原本是计划本科毕业后就直接去找工作的，记得当时已经到了中兴的终面，学校告知我因为美赛M奖而获得了保研资格。后来我放弃了工作的念头，转而准备读研。没有想到的是，自己也能保研，只有我知道自己其实并不厉害，所有好的结果都是运气成分占多数。</p><h1 id="深入了解苏打绿"><a href="#深入了解苏打绿" class="headerlink" title="深入了解苏打绿"></a>深入了解苏打绿</h1><p>在确定了读研之后，整个大四学期只需要准备毕业设计还有未来导师安排的一些学习任务，相对而言比较轻松。这段时间，我在一个名为“落网”的APP（一个专注于分享独立音乐的应用，现在已经倒闭。）上认识了SX，她的主页分享的几乎全部都是和苏打绿有关的内容，我们聊到和苏打绿相关的话题，从苏打绿的《导听CD 超好笑电台》聊到《冬 未了》，感叹身边喜欢苏打绿的人太少。后来我得知了她正在读高三，学习很用功，成绩很好。我们互相分享自己的人生经历，彼此鼓励，把对方当成自己心灵的寄托——我们都有“你是这个世界上的另一个自己”这样的感觉。</p><p>后来我们通话，写信，互相寄赠礼物，每天都期待着对方的回复，当时觉得所谓的灵魂伴侣大概就是这种感觉吧。我们约好了在她高考结束后，要去一次青海旅行，她只身一人来到西安，我们见面了，一起从西安出发去青海。再后来她上大学，在和我离得很远的城市，每逢假期，我坐很久的火车去她的城市见她，或者我们共同去一个城市。有时候因为自己的钱不够就只买火车硬座的票，就算是30多个小时的火车硬座，也一点都不会觉得辛苦。这样的时光持续到她大一下学期，也许是因为我们离得实在太远了，也许是她适应了大学的新环境，也许是不想再忍受异地了，我们最后以表面看似很平淡的方式分手了，但其实我很难过，很长一段时间自己都没有走出来。这个时候陪伴我最多的歌曲是苏打绿的《幸福额度》。</p><blockquote><p>You say why 爱让寂寞像永恒<br>And why 爱像过客不闻不问<br>Oh why 爱 似乎总不贴近灵魂<br>怎么能 怎么能<br>相聚分离 光影凉了又温<br>想起忘记 眼泪浅了又深<br>凡美丽总像是流水逝去不会转过身<br>雨水却在不知名的清晨纷纷<br>——苏打绿《幸福额度》</p></blockquote><h1 id="认真解读苏打绿"><a href="#认真解读苏打绿" class="headerlink" title="认真解读苏打绿"></a>认真解读苏打绿</h1><p>因为SX的缘故，很长一段时间，只要是和苏打绿相关的事物都会联想到她，想过要放弃苏打绿，不再接触和苏打绿相关的信息，这段时间也刚好是苏打绿休团的阶段。但后来也许是因为科研上需要投入很大的精力，在经历不断地遇到困难和解决困难的过程后，我开始在感情里慢慢变得理性，苏打绿的音乐不会再让我感到困扰，反而我开始认真思考和研究苏打绿作品里面想要传达的思想。比如，在冬专中写给LGBT群体的《墙外的风景》：</p><blockquote><p>想 无止尽地想 你那头是否也一样<br>尝 黑梦太漫长 那爱绝不能拒绝爱<br>还在想 无止尽地想 墙外的风景会怎样<br>还在尝 黑梦太漫长 那爱绝不会放弃爱<br>别失望 好失望<br>——苏打绿《墙外的风景》</p></blockquote><p>我们每个人生来都有着平等的爱的权利，但身边有一些人，他们的爱很辛苦，因为感觉无法摊在阳光下真正透气，也不被理解或接受，甚至被认为是妖魔或病毒。我们不应该用异样的眼光去看待他们，各种爱都是爱，都需要被尊重，并不是与我们不同的，就是错的。</p><h1 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h1><p>没想到把我和苏打绿的故事写成了自己的人生传记，但也确实如此，苏打绿对我影响是如此之深。现在的我已经步入社会参加工作，还是一如既往地喜欢苏打绿，他们的新专辑和周边我都会尽力的支持。我还是对这个世界满怀善意，相信温柔和善良的力量，坚信这样的力量一定会让这个世界变得更美好。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;苏打绿对我的影响可以说已经到了人生导师级别，不论是在充满了敏感与胆怯的高中时代，还是在后来上大学之后无数个感到孤独的夜晚，总有苏打绿的音乐陪伴着我，鼓励我和治愈我。在每一次的挫折和受伤之后，总能在苏打绿的音乐里找到勇气，让我能继续满怀善意地重新出发。</summary>
    
    
    
    <category term="生活琐碎" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB%E7%90%90%E7%A2%8E/"/>
    
    
    <category term="苏打绿" scheme="http://example.com/tags/%E8%8B%8F%E6%89%93%E7%BB%BF/"/>
    
    <category term="我的自传" scheme="http://example.com/tags/%E6%88%91%E7%9A%84%E8%87%AA%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>常用设计模式（C++语言）</title>
    <link href="http://example.com/2021/02/13/design_pattern_cpp/"/>
    <id>http://example.com/2021/02/13/design_pattern_cpp/</id>
    <published>2021-02-12T16:00:00.000Z</published>
    <updated>2021-03-03T15:48:52.498Z</updated>
    
    <content type="html"><![CDATA[<p>我们在写一个程序之前，就要考虑到程序的可维护性、可复用性、可扩展性，还有灵活性。面向对象的分析设计编程思想，可以通过封装、继承、多态把程序的耦合度降低，用设计模式使得程序更加灵活，容易修改，并且易于复用。<a id="more"></a></p><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>想象一下这样的场景：客户要求用C++面向对象语言实现一个计算器控制台程序，要求输入两个数和运算符号，并且得到结果。</p><h2 id="业务的封装"><a href="#业务的封装" class="headerlink" title="业务的封装"></a>业务的封装</h2><p>首先考虑一个计算器，展示给用户看到的界面，只有数字和一些运算符，用户操作通常是不同数字和操作符的组合，将其称之为界面逻辑；在程序进行具体计算的过程中，分为多种情况考虑，实现运算的过程称之为业务逻辑。程序设计的原则之一是将业务逻辑与界面逻辑分开，让他们之间的耦合度降低。</p><h2 id="让程序松耦合"><a href="#让程序松耦合" class="headerlink" title="让程序松耦合"></a>让程序松耦合</h2><p>设计程序要尽量做到松耦合，在本案例中应该把加减乘除等运算分离，修改其中一个不会影响到其他的操作符，增加运算算法也不会影响其他代码。首先，是设计一个运算类，它有两个<code>Number</code>属性，主要用于计算前后数，然后有一个虚方法<code>get_result()</code>，用于获得结果。具体的加减乘除写出运算类的子类，然后继承它，重写<code>get_result()</code>方法，这样的话，如果修改任意一个算法，就不需要提供其他算法的代码。</p><p>运算类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Operation() :numA_(<span class="number">0</span>), numB_(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~Operation() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_numA</span><span class="params">()</span><span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> numA_; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_numB</span><span class="params">()</span><span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> numB_; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_numA</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123; numA_ = a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_numB</span><span class="params">(<span class="keyword">double</span> b)</span> </span>&#123; numB_ = b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">get_result</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> numA_;</span><br><span class="line"><span class="keyword">double</span> numB_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>加法操作符类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> :</span><span class="keyword">public</span> Operation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">OperationAdd() &#123;&#125;</span><br><span class="line">~OperationAdd() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_result</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> get_numA() + get_numB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>减法操作符类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationSub</span> :</span><span class="keyword">public</span> Operation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">OperationSub() &#123;&#125;</span><br><span class="line">~OperationSub() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_result</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> get_numA() - get_numB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>乘法操作符类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationMul</span> :</span><span class="keyword">public</span> Operation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">OperationMul() &#123;&#125;</span><br><span class="line">~OperationMul() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_result</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> get_numA() * get_numB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>除法操作符类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationDiv</span> :</span><span class="keyword">public</span> Operation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">OperationDiv() &#123;&#125;</span><br><span class="line">~OperationDiv() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_result</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (get_numB() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::logic_error(<span class="string">&quot;Error, divisor cannot be 0.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> get_numA() / get_numB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="简单工厂模式-1"><a href="#简单工厂模式-1" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>现在的问题是如何去实例化对象，考虑用一个单独的类来做这个创造实例的过程，将这个类称之为工厂。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Operation* <span class="title">CreatOperation</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp; op)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (op)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OperationAdd;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OperationSub;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OperationMul;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OperationDiv;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::logic_error(<span class="string">&quot;Not find operation!&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在只需要输入运算符，工厂就会实例化出合适的对象，通过多态返回父类的方式实现了计算器的结果。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们在写一个程序之前，就要考虑到程序的可维护性、可复用性、可扩展性，还有灵活性。面向对象的分析设计编程思想，可以通过封装、继承、多态把程序的耦合度降低，用设计模式使得程序更加灵活，容易修改，并且易于复用。</summary>
    
    
    
    <category term="编程技巧" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
